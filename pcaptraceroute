#!/bin/bash

default_src_ip=""
default_src_mac=""
default_dst_mac=""
default_device="eth0"
default_waittime=5
default_nqueries=3
default_sendwait=0
default_max_ttl=30
default_first_ttl=1

default_pcap_package="ack.pcap"

script_name=$(basename $(readlink -nf $0))
function usage() {
	echo "$script_name [-s src_ip] [-S src_mac] [-D next_mac]"
	echo "[-i device] [-p port] [-P sport] [-w waittime] [-q nqueries]"
	echo "[-z sendwait] [-m max_ttl] [-f first_ttl] dst_ip"
	echo "-s src_ip"
	echo "-S src_mac"
	echo "-D next_mac"
	echo "-i device, set network device, default is $default_device"
	echo "-w waittime, set the time (in seconds) to wait for a response to a probe, default is $default_waittime"
	echo "-q nqueries, set the number of probe packets per hop, default is $default_nqueries"
	echo "-z sendwait, minimal time interval between probes, default is $default_sendwait"
	echo "-m max_ttl, specifies the maximum number of hops, default is $default_max_ttl"
	echo "-f first_ttl, specifies with what TTL to start, default is $default_first_ttl"
	echo "-g pcap_package, specifies the pcap file to use, you can generate it by yourself, default is $default_pcap_package"
	echo "dst_ip, the dest ip address, should NOT be url"
}

src_ip=$default_src_ip
src_mac=$default_src_mac
dst_mac=$default_dst_mac
device=$default_device
waittime=$default_waittime
nqueries=$default_nqueries
sendwait=$default_sendwait
max_ttl=$default_max_ttl
first_ttl=$default_first_ttl
pcap_package=$default_pcap_package

while getopts "s:S:D:i:p:P:w:q:z:m:f:h" arg;
do
	case $arg in
		s)
			src_ip=$OPTARG
			;;
		S)
			src_mac=$OPTARG
			;;
		D)
			dst_mac=$OPTARG
			;;
		i)
			device=$OPTARG
			;;
		w)
			waittime=$OPTARG
			;;
		q)
			nqueries=$OPTARG
			;;
		z)
			sendwait=$OPTARG
			;;
		m)
			max_ttl=$OPTARG
			;;
		f)
			first_ttl=$OPTARG
			;;
		g)
			pcap_package=$OPTARG
			;;
		h)
			usage
			exit 0
			;;
	esac
done

shift $(($OPTIND - 1))
dst_ip=$1

if [ "$dst_ip" == "" ]; then
	usage
	exit 1
fi

if [ "$src_ip" == "" ]; then
	src_ip=`ifconfig $device | grep 'inet addr' | tr -s ' ' | cut -f3 -d' ' | cut -f2 -d ':'`
fi

if [ "$src_mac" == "" ]; then
	src_mac=`ifconfig $device | grep HWaddr | tr -s ' ' | cut -f5 -d' '`
fi

if [ "$dst_mac" == "" ]; then
	gw=`route | grep $device | grep default | tr -s ' ' | cut -f2 -d' '`
	dst_mac=`arp -a | grep $gw | tr -s ' ' | cut -f4 -d' '`
fi

echo "src_ip: $src_ip"
echo "dst_ip: $dst_ip"
echo "src_mac: $src_mac"
echo "dst_mac: $dst_mac"
echo "device: $device"
echo "waittime: $waittime"
echo "nqueries: $nqueries"
echo "sendwait: $sendwait"
echo "max_ttl: $max_ttl"
echo "first_ttl: $first_ttl"
echo "pcap_package: $pcap_package"


tmp_dir="/tmp/pt_`echo $RANDOM`_`date +%Y%m%d%H%M%S`"
echo "tmp_dir: $tmp_dir"
echo ""

mkdir -p $tmp_dir
init_package=$tmp_dir/sample.pcap

tcprewrite --infile=$pcap_package --outfile=$init_package \
	--srcipmap=0.0.0.0/0:$src_ip --enet-smac=$src_mac \
	--dstipmap=0.0.0.0/0:$dst_ip --enet-dmac=$dst_mac \
	--fixcsum

for i in `seq $first_ttl $max_ttl`; do
	tcprewrite --infile=$init_package --outfile=$init_package$i \
		--ttl $i --fixcsum
done

tcpdump_output=$tmp_dit/tcpdump_output
for i in `seq $first_ttl $max_ttl`; do
	tcpdump -l -i $device -n icmp or src host $dst_ip > $tcpdump_output 2>&1 &
	pid=$!
	tcpreplay --intf1=$device $init_package$i > /dev/null 2>&1
	sleep 1
	count=`grep $dst_ip $tcpdump_output | wc -l`
	if [ $count -ge 1 ]; then
		# ip_addr=`grep $dst_ip $tcpdump_output | tr -s ' ' | cut -f3 -d' '`
		echo "$i $dst_ip"
		disown $pid
		kill -9 $pid > /dev/null 2>&1
		# rm -rf $tmp_dir
		exit 0
	fi
	count=`grep 'ICMP time exceeded' $tcpdump_output | wc -l`
	if [ $count -ge 1 ]; then
		ip_addr=`grep 'ICMP time exceeded' $tcpdump_output | tr -s ' ' | cut -f3 -d' '`
		echo "$i $ip_addr"
	else
		echo "$i *"
	fi
	disown $pid
	kill -9 $pid > /dev/null 2>&1
done

disown $pid
kill -9 $pid > /dev/null 2>&1
rm -rf $tmp_dir

exit 0
